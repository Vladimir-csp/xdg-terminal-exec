#!/bin/sh
# Proposal for XDG terminal execution utility
#
# by Vladimir Kudrya
# https://github.com/Vladimir-csp/
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. See <http://www.gnu.org/licenses/>.
#
# Contributors:
# Roman Chistokhodov    https://github.com/FreeSlave/
# fluvf                 https://github.com/fluvf

# Treat non-zero exit status from simple commands as an error
# Treat unset variables as errors when performing parameter expansion
# Disable pathname expansion
set -euf

# Backup original IFS value
# It is assumed that $OIFS contains the default IFS value
OIFS="$IFS"
# Newline, utility variable used throughout the script
N='
'

trim_start() {
	# Remove all but leading whitespace, and trim that from the given string
	printf '%s' "${1#"${1%%[![:space:]]*}"}"
}

check_bool() {
	case "$1" in
	true | True | TRUE | yes | Yes | YES | 1) return 0 ;;
	false | False | FALSE | no | No | NO | 0) return 1 ;;
	*)
		echo "Assuming \"$1\" means no" >&2
		return 1
		;;
	esac
}

if check_bool "${DEBUG-0}"; then
	debug() { printf '%s\n' "$1" >&2; }
else
	debug() { :; }
fi

# Find and print all config file paths
find_config_paths() {
	# Directories searched for config files, in decending order of preference
	config_directories="${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
	# Config filename to parse
	config_file=xdg-terminals.list
	# Generate list of possible config files for current Dekstop Environment
	# TODO: Should this be case insensitive? Desktop entry checks that also use $XDG_CURRENT_DESKTOP are not
	lowercase_desktops="$(printf '%s' "${XDG_CURRENT_DESKTOP-}" | tr '[:upper:]' '[:lower:]')"
	debug "lowercase desktops are: '$lowercase_desktops'"
	# Loop through paths
	# TODO: Replace this by a find call?
	IFS=':'
	for directory in $config_directories; do
		for desktop in $lowercase_desktops; do
			printf '%s\n' "$directory"/"$desktop"-"$config_file"
		done
		printf '%s\n' "$directory"/"$config_file"
	done
}

# Parse all config files and populate $ENTRY_IDS with read desktop entry IDs
read_config_paths() {
	# All config files are read immediatelly, rather than on demand, even if it's more IO intensive
	# This way all IDs are already known, and in order of preference, before iterating over them
	# This allows for easier deduplication, when adding fallback IDs later on
	IFS="$N"
	for config_path in $(find_config_paths); do
		debug "reading config '$config_path'"
		# Nonexistant file is not an error
		[ -f "$config_path" ] || continue
		# Let `read` trim leading/trailing whitespace from the line
		while IFS="$OIFS" read -r line; do
			debug "read line '$line'"
			case $line in
			# Whether to search for entries in 'xdg-terminals' or 'applications'
			# Can be overriden by $XTE_STOCK_TERMINALS
			use_stock_applications) XTE_STOCK_TERMINALS=${XTE_STOCK_TERMINALS-true} ;;
			use_xdg_terminals) XTE_STOCK_TERMINALS=${XTE_STOCK_TERMINALS-false} ;;
			# `[The extensionless entry filename] should be a valid D-Bus well-known name.`
			[A-Za-z_]*) ENTRY_IDS=${ENTRY_IDS:+${ENTRY_IDS}${N}}$line ;;
			esac
			# By default empty lines and comments get ignored
		done < "$config_path"
	done
}

# Check if newline delimited list $1 contains string $2
contains() {
	IFS="$N"
	for item in $1; do
		[ "$item" = "$2" ] && return 0
	done
	return 1
}

# Find all desktop entry files from standardised paths, populate $ENTRY_PATHS and add fallback IDs
find_entry_paths() {
	# Directory hierarchy that is searched for desktop entry files
	data_directories="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}"
	# Select which subdirectory to search for terminal emulators in:
	# 'xdg-terminals', a sepparate directory that exists for this script specifically (default),
	# 'applications', the standardised location for application desktop entry files
	# When searching in 'applications', entries will be filtered based on their Category key
	if check_bool "${XTE_STOCK_TERMINALS-false}"; then
		data_subdirectory='applications'
	else
		data_subdirectory='xdg-terminals'
	fi
	debug "searching for terminal entries in '$data_subdirectory'"
	# Loop through paths
	IFS=':'
	for directory in $data_directories; do
		# Normalise base path and append the data subdirectory with a trailing '/'
		directory=${directory%/}/$data_subdirectory/
		debug "searching '$directory'"
		# Nonexistent directory is not an error
		[ -d "$directory" ] || continue
		# Loop through paths
		IFS="$N"
		# Print order of found files is unpredictable, sort them
		for entry_path in $(find -L "$directory" -type f -name '[[:alnum:]-_.]*.desktop' | sort); do
			debug "found desktop entry '$entry_path'"
			# Create entry ID from path
			entry_path=${entry_path#"$directory"}
			entry_id=$(printf '%s' "$entry_path" | tr '/' '-')
			# Do not add duplicate IDs
			if ! contains "$ENTRY_IDS" "$entry_id"; then
				debug "adding fallback ID '$entry_id'"
				ENTRY_IDS=${ENTRY_IDS:+${ENTRY_IDS}${N}}$entry_id
			fi
			# Delimit end of the data directory path by adding an extra '/' character
			# This is done so the ID can be recreated later
			entry_path="$directory"/"$entry_path"
			ENTRY_PATHS=${ENTRY_PATHS:+${ENTRY_PATHS}${N}}$entry_path
		done
	done
}

# Find a matching file path for a given entry ID
find_entry_path() {
	entry_id="$1"
	debug "finding path for entry id '$entry_id'"

	# Loop through paths, any empty lines should be discarded by word splitting
	IFS="$N"
	for entry_path in $ENTRY_PATHS; do
		debug "checking entry '$entry_path'"
		# ID is path without '$data_dir/$DATA_PREFIX_DIR//'
		found_entry_id="${entry_path#*//}"
		# Remove '//' from desktop entry path
		entry_path="${entry_path%//*}"/"$found_entry_id"
		found_entry_id="$(printf '%s' "$found_entry_id" | tr '/' '-')"
		debug "checking entry id '$found_entry_id'"
		[ "$found_entry_id" != "$entry_id" ] && continue
		debug "found entry path '$entry_path'"
		printf '%s' "$entry_path"
		return 0
	done
	IFS="$OIFS"
	debug 'no matching entry path found'
	return 1
}

# Check validity of a given entry line
# Modifies following global variables:
# EXEC : Program to execute, possibly with arguments. See spec for details.
# EXECARG : Execution argument for the terminal emulator.
# TERMINAL : Set if application has been categorised as a terminal emulator
check_entry() {
	# Order of checks is important
	case $1 in
	'Categories'*=*)
		# Enforce only if reading from 'applications' subdirectory
		! check_bool "${XTE_STOCK_TERMINALS-false}" && return 0
		categories=$(trim_start "${1#*=}")
		debug "read Categories '$categories'"
		IFS=';'
		for category in $categories; do
			if [ "$category" = 'TerminalEmulator' ]; then
				debug "entry categorised as a Terminal Emulator"
				# Set global variable
				TERMINAL=true
				IFS="$OIFS"
				return 0
			fi
		done
		IFS="$OIFS"
		# Default in this case is to fail
		return 1
		;;
	'OnlyShowIn'*=*)
		onlyShowIn=$(trim_start "${1#*=}")
		debug "read OnlyShowIn '$onlyShowIn'"
		IFS=';'
		for name in $onlyShowIn; do
			IFS=':'
			for desktop in ${XDG_CURRENT_DESKTOP-}; do
				IFS="$OIFS"
				debug "checking OnlyShowIn match '$desktop'='$name'"
				[ "$desktop" = "$name" ] && return 0
			done
		done
		IFS="$OIFS"
		# Default in this case is to fail
		return 1
		;;
	'NotShowIn'*=*)
		notShowIn=$(trim_start "${1#*=}")
		debug "read NotShowIn '$notShowIn'"
		IFS=';'
		for name in $notShowIn; do
			IFS=':'
			for desktop in ${XDG_CURRENT_DESKTOP-}; do
				IFS="$OIFS"
				debug "checking NotShowIn match '$desktop'='$name'"
				[ "$desktop" = "$name" ] && return 1
			done
		done
		IFS="$OIFS"
		# Default in this case is to succeed
		return 0
		;;
	'X-ExecArg'*=*)
		# Set global variable
		EXECARG=$(trim_start "${1#*=}")
		debug "read execution argument '$EXECARG'"
		;;
	'ExecArg'*=*)
		# Set global variable
		EXECARG=$(trim_start "${1#*=}")
		debug "read execution argument '$EXECARG'"
		;;
	'TryExec'*=*)
		executable=$(trim_start "${1#*=}")
		debug "checking TryExec executable '$executable'"
		command -v "$executable" > /dev/null || return 1
		;;
	'Hidden'*=*)
		hidden=$(trim_start "${1#*=}")
		debug "checking Hidden boolean '$hidden'"
		[ "$hidden" = 'true' ] && return 1
		;;
	'Exec'*=*)
		# Set global variable
		EXEC=$(trim_start "${1#*=}")
		# Get first word from read Exec value
		eval "set -- $EXEC"
		exec0="$1"
		debug "checking Exec[0] executable '$exec0'"
		command -v "$exec0" > /dev/null || return 1
		;;
	esac
	# By default unrecognised keys, empty lines and comments get ignored
}

# Read entry from given path, only parse 'Desktop Entry' group
read_entry_path() {
	entry_path="$1"
	debug "reading desktop entry '$entry_path'"
	# failsafe for empty entries
	HAS_DATA=false
	# Let `read` trim leading/trailing whitespace from the line
	while read -r line; do
		case $line in
		# `There should be nothing preceding [the Desktop Entry group] in the desktop entry file but [comments]`
		'[Desktop Entry]'*) ;;
		# A `Key=Value` pair, check it
		[A-Za-z0-9-]*)
			HAS_DATA=true
			check_entry "$line" && continue
			# Reset values that might have been set
			unset EXEC
			unset EXECARG
			unset TERMINAL
			return 1
			;;
		# Start of the next group header, stop
		'['*) break ;;
		esac
		# By default empty lines and comments get ignored
	done < "$entry_path"
	case $HAS_DATA in
	true) return 0 ;;
	false) return 1 ;;
	esac
}

# All desktop entry ids in descending order of preference
ENTRY_IDS=''
# Modifies $ENTRY_IDS
read_config_paths
# All desktop entry paths in descending order of preference
ENTRY_PATHS=''
# Modifies $ENTRY_PATHS and $ENTRY_IDS
find_entry_paths

debug "final entry ID list '$ENTRY_IDS'"
debug "final entry path list '$ENTRY_PATHS'"

# Loop through IDs, any empty lines should be discarded by word splitting
IFS="$N"
for entry_id in $ENTRY_IDS; do
	# See read_entry_path and check_entry
	if read_entry_path "$(find_entry_path "$entry_id")"; then
		# If reading from 'applications' subdirectory, ensure entry is a Terminal Emulator
		check_bool "${XTE_STOCK_TERMINALS-false}" && [ -z "${TERMINAL-}" ] && continue
		# Default to '-e' if unset
		EXECARG=${EXECARG-'-e'}
		break
	fi
done
IFS="$OIFS"

if [ -z "${EXEC-}" ]; then
	# Set defaults
	EXEC='xterm'
	EXECARG='-e'
fi

# Store original argument list, before it's modified
ORIG_ARGV="$*"

# `Implementations must undo quoting [in the Exec argument(s)][...]`
if [ "$#" -gt 0 ]; then
	eval "set -- $EXEC ${EXECARG:+'"$EXECARG"'} \"\$@\""
else
	eval "set -- $EXEC"
fi

debug "EXEC=$EXEC
EXECARG=$EXECARG
ARGV=$ORIG_ARGV
Final argv (>arg< per line):
$(printf '>%s<\n' "$@")
End of final argv"

exec "$@"
