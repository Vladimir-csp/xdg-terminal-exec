#!/bin/sh
# Proposal for XDG terminal execution utility
#
# by Vladimir Kudrya
# https://github.com/Vladimir-csp/
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. See <http://www.gnu.org/licenses/>.
#
# Contributors:
# Roman Chistokhodov    https://github.com/FreeSlave/
# fluvf                 https://github.com/fluvf

# Treat non-zero exit status from simple commands as an error
# Treat unset variables as errors when performing parameter expansion
# Disable pathname expansion
set -euf

# Store original IFS value, assumed to contain the default: <space><tab><newline>
OIFS="$IFS"
# Newline, utility variable used throughout the script
N='
'

check_bool() {
	case "$1" in
	true | True | TRUE | yes | Yes | YES | 1) return 0 ;;
	false | False | FALSE | no | No | NO | 0) return 1 ;;
	*)
		echo "Assuming \"$1\" means no" >&2
		return 1
		;;
	esac
}

if check_bool "${DEBUG-0}"; then
	debug() { printf '%s\n' "$1" >&2; }
else
	debug() { :; }
fi

# Find and print all config file paths
find_config_paths() {
	# Directories searched for config files, in decending order of preference
	config_directories="${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
	# Config filename to parse
	config_file=xdg-terminals.list
	# Generate list of possible config files for current Dekstop Environment
	# TODO: Should this be case insensitive? Desktop entry checks that also use $XDG_CURRENT_DESKTOP are not
	lowercase_desktops="$(printf '%s' "${XDG_CURRENT_DESKTOP-}" | tr '[:upper:]' '[:lower:]')"
	debug "lowercase desktops are: '$lowercase_desktops'"
	# Loop through paths
	# TODO: Replace this by a find call?
	IFS=':'
	for directory in $config_directories; do
		for desktop in $lowercase_desktops; do
			printf '%s\n' "$directory"/"$desktop"-"$config_file"
		done
		printf '%s\n' "$directory"/"$config_file"
	done
}
# Mask IFS withing function to allow temporary changes
alias find_config_paths='IFS= find_config_paths'

# Parse all config files and populate $ENTRY_IDS with read desktop entry IDs
read_config_paths() {
	# All config files are read immediatelly, rather than on demand, even if it's more IO intensive
	# This way all IDs are already known, and in order of preference, before iterating over them
	# This allows for easier deduplication, when adding fallback IDs later on
	IFS="$N"
	for config_path in $(find_config_paths); do
		debug "reading config '$config_path'"
		# Nonexistant file is not an error
		[ -f "$config_path" ] || continue
		# Let `read` trim leading/trailing whitespace from the line
		while IFS="$OIFS" read -r line; do
			debug "read line '$line'"
			case $line in
			# Whether to search for entries in 'xdg-terminals' or 'applications'
			# Can be overriden by $XTE_STOCK_TERMINALS
			use_stock_applications) XTE_STOCK_TERMINALS=${XTE_STOCK_TERMINALS-true} ;;
			use_xdg_terminals) XTE_STOCK_TERMINALS=${XTE_STOCK_TERMINALS-false} ;;
			# `[The extensionless entry filename] should be a valid D-Bus well-known name.`
			[A-Za-z_]*) ENTRY_IDS=${ENTRY_IDS:+${ENTRY_IDS}${N}}$line ;;
			esac
			# By default empty lines and comments get ignored
		done < "$config_path"
	done
}
# Mask IFS withing function to allow temporary changes
alias read_config_paths='IFS= read_config_paths'

# Check if newline delimited list $1 contains string $2
contains() {
	IFS="$N"
	for item in $1; do
		[ "$item" = "$2" ] && return 0
	done
	return 1
}
# Mask IFS withing function to allow temporary changes
alias contains='IFS= contains'

# Find and map all desktop entry files from standardised paths into aliases
find_entry_paths() {
	# Directory hierarchy that is searched for desktop entry files
	data_directories="${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}"
	# Select which subdirectory to search for terminal emulators in:
	# 'xdg-terminals', a sepparate directory that exists for this script specifically (default),
	# 'applications', the standardised location for application desktop entry files
	# When searching in 'applications', entries will be filtered based on their Category key
	if check_bool "${XTE_STOCK_TERMINALS-false}"; then
		data_subdirectory='applications'
	else
		data_subdirectory='xdg-terminals'
	fi
	debug "searching for terminal entries in '$data_subdirectory'"
	# Loop through paths
	IFS=':'
	for directory in $data_directories; do
		# Normalise base path and append the data subdirectory with a trailing '/'
		directory=${directory%/}/$data_subdirectory/
		debug "searching '$directory'"
		# Nonexistent directory is not an error
		[ -d "$directory" ] || continue
		# Loop through paths
		IFS="$N"
		# Print order of found files is unpredictable, sort them
		for entry_path in $(find -L "$directory" -type f -name '[[:alnum:]-_.]*.desktop' | sort); do
			debug "found desktop entry '$entry_path'"
			# Create entry ID from path
			entry_id=$(printf '%s' "${entry_path#"$directory"}" | tr '/' '-')
			# Do not add duplicate IDs
			if ! contains "$ENTRY_IDS" "$entry_id"; then
				debug "adding fallback ID '$entry_id'"
				ENTRY_IDS=${ENTRY_IDS:+${ENTRY_IDS}${N}}$entry_id
			fi
			# `If [entries with duplicate IDs] exist, it is undefined which is selected.`
			# For simplicity, the last ID encountered is the one used
			# shellcheck disable=SC2139
			alias "$entry_id"="entry_path='$entry_path'"
		done
	done
}
# Mask IFS withing function to allow temporary changes
alias find_entry_paths='IFS= find_entry_paths'

# Check validity of a given entry key - value pair
# Modifies following global variables:
# EXEC : Program to execute, possibly with arguments. See spec for details.
# EXECARG : Execution argument for the terminal emulator.
# TERMINAL : Set if application has been categorised as a terminal emulator
check_entry_key() {
	key="$1"
	value="$2"

	# Order of checks is important
	case $key in
	'Categories'*=*)
		# Enforce only if reading from 'applications' subdirectory
		! check_bool "${XTE_STOCK_TERMINALS-false}" && return 0
		debug "read Categories '$value'"
		IFS=';'
		for category in $value; do
			if [ "$category" = 'TerminalEmulator' ]; then
				debug "entry categorised as a Terminal Emulator"
				# Set global variable
				TERMINAL=true
				return 0
			fi
		done
		# Default in this case is to fail
		return 1
		;;
	'OnlyShowIn'*=*)
		debug "read OnlyShowIn '$value'"
		IFS=';'
		for target in $value; do
			IFS=':'
			for desktop in ${XDG_CURRENT_DESKTOP-}; do
				debug "checking OnlyShowIn match '$desktop'='$target'"
				[ "$desktop" = "$target" ] && return 0
			done
		done
		# Default in this case is to fail
		return 1
		;;
	'NotShowIn'*=*)
		debug "read NotShowIn '$value'"
		IFS=';'
		for target in $value; do
			IFS=':'
			for desktop in ${XDG_CURRENT_DESKTOP-}; do
				debug "checking NotShowIn match '$desktop'='$target'"
				[ "$desktop" = "$target" ] && return 1
			done
		done
		# Default in this case is to succeed
		return 0
		;;
	'X-ExecArg'*=* | 'ExecArg'*=*)
		# Set global variable
		EXECARG=$value
		debug "read execution argument '$EXECARG'"
		;;
	'TryExec'*=*)
		debug "checking TryExec executable '$value'"
		command -v "$value" > /dev/null || return 1
		;;
	'Hidden'*=*)
		debug "checking Hidden boolean '$value'"
		[ "$value" = 'true' ] && return 1
		;;
	'Exec'*=*)
		# Set global variable
		EXEC=$value
		# Get first word from read Exec value
		IFS="$OIFS"
		eval "set -- $EXEC"
		debug "checking Exec[0] executable '$1'"
		command -v "$1" > /dev/null || return 1
		;;
	esac
	# By default unrecognised keys, empty lines and comments get ignored
}
# Mask IFS withing function to allow temporary changes
alias check_entry='IFS= check_entry'

# Read entry from given path, only parse 'Desktop Entry' group
read_entry_path() {
	entry_path="$1"
	debug "reading desktop entry '$entry_path'"
	# Let `read` trim leading/trailing whitespace from the line
	while IFS="$OIFS" read -r line; do
		case $line in
		# `There should be nothing preceding [the Desktop Entry group] in the desktop entry file but [comments]`
		'[Desktop Entry]'*) ;;
		# A `Key=Value` pair
		[A-Za-z0-9-]*)
			# Split value from pair
			value=${line#*=}
			# Remove all but leading spaces, and trim that from the value
			value=${value#"${value%%[! ]*}"}
			# Check the key
			check_entry_key "$line" "$value" && continue
			# Reset values that might have been set
			unset EXEC
			unset EXECARG
			unset TERMINAL
			return 1
			;;
		# Start of the next group header, stop
		'['*) break ;;
		esac
		# By default empty lines and comments get ignored
	done < "$entry_path"
}

# Loop through IDs and try to find a valid entry
find_entry() {
	IFS="$N"
	for entry_id in $ENTRY_IDS; do
		debug "matching path for entry ID '$entry_id'"
		# Check if a matching path was found for ID
		alias "$entry_id" > /dev/null 2>&1 || continue
		# Evaluates the alias, it sets $entry_path
		eval "$entry_id"
		read_entry_path "$entry_path" || continue
		# Check that the entry is actually executable
		[ -z "${EXEC-}" ] && continue
		# If reading from 'applications' subdirectory, ensure entry is a Terminal Emulator
		[ "${XTE_STOCK_TERMINALS-}" = 'true' ] && [ -z "${TERMINAL-}" ] && continue
		# Entry is valid, stop
		return 0
	done
	# No valid entry was found
	return 1
}
# Mask IFS withing function to allow temporary changes
alias find_entry='IFS= find_entry'

# All desktop entry ids in descending order of preference, with duplicates removed
ENTRY_IDS=''
# Modifies $ENTRY_IDS
read_config_paths
# Modifies $ENTRY_IDS and sets global aliases
find_entry_paths

debug "final entry ID list '$ENTRY_IDS'"

find_entry || true

# Set defaults
: "${EXEC="xterm"}"
: "${EXECARG="-e"}"

# Store original argument list, before it's modified
ORIG_ARGV="$*"

# `Implementations must undo quoting [in the Exec argument(s)][...]`
if [ "$#" -gt 0 ]; then
	eval "set -- $EXEC ${EXECARG:+'"$EXECARG"'} \"\$@\""
else
	eval "set -- $EXEC"
fi

debug "EXEC=$EXEC
EXECARG=$EXECARG
ARGV=$ORIG_ARGV
Final argv (>arg< per line):
$(printf '>%s<\n' "$@")
End of final argv"

exec "$@"
